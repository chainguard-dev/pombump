package pkg

import (
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func TestPreserveCommentsInPOMUpdate(t *testing.T) {
	tests := []struct {
		name           string
		originalXML    string
		modifiedXML    string
		expectedResult string
		description    string
	}{
		{
			name: "preserve header comment after project tag",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0">
<!--
  Copyright notice
  Second line
-->
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0">
<!--
  Copyright notice
  Second line
-->
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
</project>`,
			description: "Should preserve copyright comment after project tag",
		},
		{
			name: "preserve inline comment in properties",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
  <properties>
    <!-- This is the Spring version -->
    <spring.version>5.3.0</spring.version>
    <!-- Database version -->
    <db.version>8.0</db.version>
  </properties>
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <properties>
        <spring.version>5.3.1</spring.version>
        <db.version>8.0.1</db.version>
    </properties>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <properties>
    <!-- This is the Spring version -->
        <spring.version>5.3.1</spring.version>
    <!-- Database version -->
        <db.version>8.0.1</db.version>
    </properties>
</project>`,
			description: "Should preserve comments in properties section",
		},
		{
			name: "preserve both header and inline comments",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
<!-- Main header comment -->
  <modelVersion>4.0.0</modelVersion>
  <properties>
    <!-- Version property -->
    <app.version>1.0.0</app.version>
  </properties>
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
    <properties>
        <app.version>1.0.1</app.version>
    </properties>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project>
<!-- Main header comment -->
    <modelVersion>4.0.0</modelVersion>
    <properties>
    <!-- Version property -->
        <app.version>1.0.1</app.version>
    </properties>
</project>`,
			description: "Should preserve multiple types of comments",
		},
		{
			name: "handle POM with no comments",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
</project>`,
			description: "Should handle POM files without comments",
		},
		{
			name: "preserve comments before XML declaration",
			originalXML: `<!-- File generated by build process -->
<!-- Do not edit manually -->
<?xml version="1.0" encoding="UTF-8"?>
<project>
  <modelVersion>4.0.0</modelVersion>
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
</project>`,
			expectedResult: `<!-- File generated by build process -->
<!-- Do not edit manually -->
<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
</project>`,
			description: "Should preserve comments before XML declaration",
		},
		{
			name: "preserve multi-line comment blocks",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
<!--
  This is a multi-line comment
  with several lines
  of important information
-->
  <modelVersion>4.0.0</modelVersion>
  <properties>
    <!--
      Another multi-line comment
      in properties section
    -->
    <java.version>11</java.version>
  </properties>
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
    <properties>
        <java.version>17</java.version>
    </properties>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project>
<!--
  This is a multi-line comment
  with several lines
  of important information
-->
    <modelVersion>4.0.0</modelVersion>
    <properties>
    <!--
      Another multi-line comment
      in properties section
    -->
        <java.version>17</java.version>
    </properties>
</project>`,
			description: "Should preserve multi-line comment blocks",
		},
		{
			name: "preserve comments in nested structures",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
  <dependencyManagement>
    <dependencies>
      <!-- Spring BOM -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-framework-bom</artifactId>
      </dependency>
      <!-- Security libs -->
      <dependency>
        <groupId>org.security</groupId>
        <artifactId>security-core</artifactId>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
            </dependency>
            <dependency>
                <groupId>org.security</groupId>
                <artifactId>security-core</artifactId>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <dependencyManagement>
        <dependencies>
      <!-- Spring BOM -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
            </dependency>
      <!-- Security libs -->
            <dependency>
                <groupId>org.security</groupId>
                <artifactId>security-core</artifactId>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>`,
			description: "Should preserve comments in nested structures like dependencies",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Create temporary directory
			tmpDir, err := os.MkdirTemp("", "pombump-test-*")
			if err != nil {
				t.Fatalf("Failed to create temp dir: %v", err)
			}
			defer func() {
				if err := os.RemoveAll(tmpDir); err != nil {
					panic(err)
				}
			}()

			// Write original XML to file
			originalPath := filepath.Join(tmpDir, "original.xml")
			if err := os.WriteFile(originalPath, []byte(tt.originalXML), 0644); err != nil {
				t.Fatalf("Failed to write original file: %v", err)
			}

			// Call the function
			result, err := PreserveCommentsInPOMUpdate(originalPath, []byte(tt.modifiedXML))
			if err != nil {
				t.Fatalf("PreserveCommentsInPOMUpdate failed: %v", err)
			}

			// Normalize line endings and whitespace for comparison
			normalizeXML := func(xml string) string {
				lines := strings.Split(strings.TrimSpace(xml), "\n")
				var normalized []string
				for _, line := range lines {
					normalized = append(normalized, strings.TrimRight(line, " \t"))
				}
				return strings.Join(normalized, "\n")
			}

			expectedNorm := normalizeXML(tt.expectedResult)
			resultNorm := normalizeXML(string(result))

			if resultNorm != expectedNorm {
				t.Errorf("Test %s failed: %s\nExpected:\n%s\n\nGot:\n%s\n", 
					tt.name, tt.description, expectedNorm, resultNorm)
			}
		})
	}
}

func TestPreserveCommentsInPOMUpdate_FileErrors(t *testing.T) {
	tests := []struct {
		name        string
		inputPath   string
		expectError bool
		errorMsg    string
	}{
		{
			name:        "non-existent file",
			inputPath:   "/non/existent/file.xml",
			expectError: true,
			errorMsg:    "failed to stat file",
		},
		{
			name:        "invalid path with ..",
			inputPath:   "../../../etc/passwd",
			expectError: true,
			errorMsg:    "invalid file path",
		},
		{
			name:        "path with null byte",
			inputPath:   "file\x00.xml",
			expectError: true,
			errorMsg:    "invalid file path",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			_, err := PreserveCommentsInPOMUpdate(tt.inputPath, []byte("<project></project>"))
			if !tt.expectError {
				if err != nil {
					t.Errorf("Unexpected error: %v", err)
				}
			} else {
				if err == nil {
					t.Error("Expected error but got none")
				} else if !strings.Contains(err.Error(), tt.errorMsg) {
					t.Errorf("Expected error containing '%s', got: %v", tt.errorMsg, err)
				}
			}
		})
	}
}

func TestPreserveCommentsInPOMUpdate_EdgeCases(t *testing.T) {
	tests := []struct {
		name           string
		originalXML    string
		modifiedXML    string
		expectedResult string
		description    string
	}{
		{
			name: "empty output content",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!-- Comment -->
  <modelVersion>4.0.0</modelVersion>
</project>`,
			modifiedXML:    "",
			expectedResult: "",
			description:    "Should handle empty output gracefully",
		},
		{
			name: "comments at end of file",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
  <modelVersion>4.0.0</modelVersion>
</project>
<!-- End of file comment -->`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
</project>
<!-- End of file comment -->`,
			description: "Should preserve comments at end of file",
		},
		{
			name: "inline comments (same line as element)",
			originalXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
  <groupId>com.example</groupId> <!-- Company group ID -->
  <artifactId>my-app</artifactId> <!-- Application name -->
</project>`,
			modifiedXML: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <groupId>com.example</groupId>
    <artifactId>my-app</artifactId>
</project>`,
			expectedResult: `<?xml version="1.0" encoding="UTF-8"?>
<project>
    <groupId>com.example</groupId>
    <artifactId>my-app</artifactId>
</project>`,
			description: "Inline comments (on same line as elements) are not preserved in current implementation",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Create temporary directory
			tmpDir, err := os.MkdirTemp("", "pombump-edge-test-*")
			if err != nil {
				t.Fatalf("Failed to create temp dir: %v", err)
			}
			defer func() {
				if err := os.RemoveAll(tmpDir); err != nil {
					panic(err)
				}
			}()

			// Write original XML to file
			originalPath := filepath.Join(tmpDir, "original.xml")
			if err := os.WriteFile(originalPath, []byte(tt.originalXML), 0644); err != nil {
				t.Fatalf("Failed to write original file: %v", err)
			}

			// Call the function
			result, err := PreserveCommentsInPOMUpdate(originalPath, []byte(tt.modifiedXML))
			if err != nil {
				t.Fatalf("PreserveCommentsInPOMUpdate failed: %v", err)
			}

			// For empty output, just check length
			if tt.modifiedXML == "" {
				if len(result) != 0 {
					t.Errorf("Expected empty result for empty input, got: %s", string(result))
				}
				return
			}

			// Normalize and compare
			normalizeXML := func(xml string) string {
				lines := strings.Split(strings.TrimSpace(xml), "\n")
				var normalized []string
				for _, line := range lines {
					normalized = append(normalized, strings.TrimRight(line, " \t"))
				}
				return strings.Join(normalized, "\n")
			}

			expectedNorm := normalizeXML(tt.expectedResult)
			resultNorm := normalizeXML(string(result))

			if resultNorm != expectedNorm {
				t.Errorf("Test %s failed: %s\nExpected:\n%s\n\nGot:\n%s\n", 
					tt.name, tt.description, expectedNorm, resultNorm)
			}
		})
	}
}
